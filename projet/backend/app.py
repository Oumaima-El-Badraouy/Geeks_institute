from flask import Flask, request, jsonify
from flask_cors import CORS
import re
import math

app = Flask(__name__)
CORS(app)

def basic_features(code: str):
    lines = code.splitlines()
    n_lines = len(lines)
    n_chars = len(code)
    avg_line_len = n_chars / (n_lines or 1)

    comment_lines = [ln for ln in lines if ln.strip().startswith(("#", "//", "/*", "*", "--"))]
    comment_ratio = len(comment_lines) / (n_lines or 1)
    identifiers = re.findall(r'[A-Za-z_][A-Za-z0-9_]*', code)
    id_lens = [len(i) for i in identifiers] or [1]
    avg_id_len = sum(id_lens)/len(id_lens)
    tokens = re.findall(r'\w+|\S', code)
    vocab = set(tokens)
    type_token_ratio = len(vocab) / (len(tokens) or 1)
    boilerplate_hits = 0
    patterns = [
        r"This code", r"generated by", r"as an AI language model",
        r"assistant", r"ChatGPT", r"Gemini", r"Claude"
    ]
    for p in patterns:
        if re.search(p, code, re.IGNORECASE):
            boilerplate_hits += 1
    brace_semicolon = sum(1 for ln in lines if ln.count("{")+ln.count("}")+ln.count(";") >= 2)
    brace_ratio = brace_semicolon/(n_lines or 1)

    return {
        "n_lines": n_lines,
        "avg_line_len": avg_line_len,
        "comment_ratio": comment_ratio,
        "avg_id_len": avg_id_len,
        "type_token_ratio": type_token_ratio,
        "boilerplate_hits": boilerplate_hits,
        "brace_ratio": brace_ratio
    }

def heuristic_score(f):
    score = 0.0
    score += min(f["boilerplate_hits"] * 25, 50)
    if f["comment_ratio"] < 0.02:
        score += 10
    elif f["comment_ratio"] < 0.05:
        score += 5
    if f["type_token_ratio"] < 0.18:
        score += 10
    elif f["type_token_ratio"] < 0.25:
        score += 5
    if f["avg_id_len"] < 4:
        score += 10
    elif f["avg_id_len"] < 5:
        score += 5
    if f["brace_ratio"] > 0.25:
        score += 5

    if f["avg_line_len"] > 120:
        score += 5

    return max(0, min(100, round(score, 1)))

def explanation(f, score):
    reasons = []
    if f["boilerplate_hits"] > 0:
        reasons.append("لقينا عبارات بحال 'generated by' أو 'AI language model'.")
    if f["comment_ratio"] < 0.02:
        reasons.append("التعاليق شبه منعدمة.")
    if f["type_token_ratio"] < 0.18:
        reasons.append("تنوّع الرموز قليل (تكرار كبير).")
    if f["avg_id_len"] < 4:
        reasons.append("أسماء المعرّفات قصيرة/عامة.")
    if f["brace_ratio"] > 0.25:
        reasons.append("نمط الأقواس والفواصل متكرر بزاف.")
    if f["avg_line_len"] > 120:
        reasons.append("أسطر طويلة بزاف (فورماتر تلقائي؟).")

    if not reasons:
        reasons.append("ما بانوش مؤشرات قوية على توليد AI (ولكن ما كايناش ضمانة 100%).")

    # نصيحة استعمال
    reasons.append("استعملو غير كإشارة، وطلب من صاحب الكود يشرح المنهجية والقرارات التقنية.")
    return reasons

@app.route("/api/analyze", methods=["POST"])
def analyze():
    data = request.get_json(force=True)
    code = data.get("code", "")
    if not code.strip():
        return jsonify({"error": "code is empty"}), 400

    feats = basic_features(code)
    score = heuristic_score(feats)
    reasons = explanation(feats, score)

    return jsonify({
        "score": score,
        "confidence_label": "High" if score >= 70 else "Medium" if score >= 40 else "Low",
        "features": feats,
        "reasons": reasons
    }), 200

if __name__ == "__main__":
    app.run(debug=True)
